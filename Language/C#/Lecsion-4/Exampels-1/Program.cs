// Первое и главное — как задаются двумерные массивы. По аналогии с одномерными массивами мы
// указываем тип данных (например, string), в квадратных скобках ставим запятую как показатель того,
// что у нас будет две размерности: первая — строки, вторая — столбцы.Потом даём массиву название
// (например, table). После этого пишем new string и указываем, какое количество строчек и столбцов
// нам нужн

//string[,] table = new string[2, 3];

// В первом примере задан массив строк (можно сказать, что это таблица из строк). Но можно задать и
// прямоугольную таблицу чисел, которую в математике обычно называют матрицей. В квадратных
// скобках также первым числом мы обозначаем количество строк, которые будут в нашем двумерном
// массиве, а вторым числом указываем количество столбцов. 

// Int[,] matrix = new int[5,8]

//          Давайте немного попишем код и посмотрим, что у нас получится.

//          Создание матрицы

// Начнём с первого примера — напишем таблицу строк. Тип данных string вы уже должны были
// запомнить. Дальше — new string.Указываем, что у нас будет 2 строки и 5 столбцов. 

//string[,] table = new string[2, 5];

// Чтобы обратиться к нужному элементу, указываем имя массива и в квадратных скобках пишем индекс
// строки (1) и индекс столбца (2). После этого можем работать как раньше, как будто это обычная
// переменная

// string[,] table = new string[2, 5];
// table[1, 2] = "слово";

// От себя отмечу, что индексы, которые вы будете использовать как для строк, так и для столбцов,
// меняются от нуля. То есть, если рассматривать весь наш массив, самый первый элемент будет
// table[0,0]. Учитывая, что у нас всего две строки, максимальный индекс строки будет table[1,0].
// 4
// Столбцов у нас пять, поэтому обращаться к ним мы будем так: table[0, 0] — первый столбик, table[0, 1]
// — второй, table[0, 2] — третий, table[0, 3] — четвёртый, table[0, 4] — пятый. Напоминаю, что для строк
// инициализация происходит через константу Empty. 

string[,] table = new string[2, 5];
// String.Empty - пустя строка
// table [0,0] table [0,1] table [0,2] table [0,4]
// table [1,0] table [1,1] table [1,2] table [1,4]
table[1, 2] = "слово";

// Давайте теперь, используя циклы (а здесь нам потребуется цикл в цикле), распечатаем данный массив.
// Укажем счётчик rows, количество строк не больше 2. Дальше будет внутренний (вложенный) цикл,
// который обозначает количество столбцов (у нас их 5). Здесь мы уже можем сделать распечатывание
// элементов массива. Давайте, как и ранее, воспользуемся интерполяцией. Обращаемся к элементам
// массива через имя массива. Дальше индекс строки и индекс столбца

for (int rows = 0; rows < 2; rows++)
{
    for (int columns = 0; columns < 5; columns++)
    {
        //Console.WriteLine($"{table[rows, columns]}");  было так



        // Попробуем запустить код в таком виде и посмотрим, что получится. После компиляции видим что-то
        // непонятное:

        // Чтобы убедиться, что у нас действительно вывелись 10 элементов, сделаем обрамление в виде
        // минусов или дефисов (кому как больше нравится) и убедимся, что у нас действительно выводятся
        // строки.
        Console.WriteLine($"-{table[rows, columns]}-"); // а стало так
    }   
}     