                                            # LIST COMPREHENSION
# List Comprehension - Нужен для того сто бы очень быстро создовать списки
# Синтексис:
# [exp for item in iterable]                                    - есть некоторое вырожение (exp) дальше мы пошим (for item in
#                                                                 некий интерируемый обект (в качестве которого момет выступать
#                                                                 какято последовательность элементов (это может быть список...)
#                                                                 дальше на выходе мы получим полноценый список(item)) iterable)


# [exp for item in iterable (if conditional)]                   - если требуеться делать какуето выборку по условию (for) то в
#                                                                 этом случае мы пожем прописать ((if conditional) и прописать
#                                                                 что конкретно мы будим выбирть
#  
# [exp <if conditional> for item in iterable (if conditional)]  - так же есть более сложная конструкция напрактике не
#                                                                 рекомендуют ее использовать на само старте потому что
#                                                                 превращяет код в не четаемую чепуху

                                             # [exp for item in iterable]

# Мы хотим состовить вакойто список состояшийся из четных чисел в диапозоне от 1 до 100

# list = [] # Создать список

# for i in range(1, 101):                     # Пробежаться по 1 до 101 (т.к 100 входит в список)
# #    if(i%2 == 0):                          # если остаток от деления на 2 равен 0
#         list.append(i)                      # То в это случае


# print(list) # И хотим распечатать и покозать что он будет состоять из четных цифр
                                              # Можно ли это зделать как то красиво для начала убрать 25 строку
# list = [i for i in range(1,21)]             # Туже самую конструкцию можно написать проще технически то что написано в
                                              # строках с 24 по 26 описано здесь без учето проверки условия (строка 25)
                                              # (уменщили диапозон что бы легче читалось не до 100 а до 20)

# print(list)                                 # Все хорошо и квадратные скобки [] озночаюшие что это list

#list = [i for i in range(1, 21) if i % 2 ==0]# Теперь мы хотим добавить условия если число четное строка 25 просто можно
                                              # дописат в строке 31
# print(list)
# list = [(i, i) for i in range(1, 21) if i % 2 == 0] # Захотели создать пару каждого из четных чисел тоесть подключаем КОРТЕЖИ
                                                    # также можно дописать только уже в строку 37
# print(list)

def f(x):
    return x**3
    

# list = [f(i) for i in range(1, 21) if i % 2 == 0]    # Также мы можем обрабатывать даные тоесть указывать не просто само значения, а могли взять кое какую функцию (делаем по старинке) есть функция f которая будет возводит число в 3 степень в вырожения строке 40 подписываем вырожения f(i) что сейчас произойдет у нас будет перебераться все числа в диапозоне от 1 до 20 из них будут выброны только те значения для которых числа четные после этого будет к определеной выборке применяться функция f и будит возводит втретию степень
# print(list)                                          # у нас список показывает только кубы

list = [(i, f(i)) for i in range(1, 21) if i % 2 == 0] # снова подключим картежи и у нас получиться число и его куб
print(list)
