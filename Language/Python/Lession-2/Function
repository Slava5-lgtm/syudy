# Как разбить свое проложения что бы у нас не было в одном файле 100 200 300 строк кода в это случае мы
# можем определить некоторое количество скриптов (файлов) в которые будем складывать на отдельный
# файлик, отдельный какойто функционал, наполная его функциями. И далее из одного скрипоа (файла)
# использовать функционал другого


# import hello              что бы часто не писать (import hello) можно написать (import hello as h)
#                           и вызывать просто написав (print(h.f(1)))

# print(hello.f(1))


# Функции. Определения и вызовы
# Функция - это многократно использование фрагмента програмы. При помощи функции можно объединять несколько инструкций в один
# блок, присвоить этому блоку имя и затем, оброщяться по имени этого блока, выполнить инструкцию внутри него в любом месте
# програмы необходимое число раз

# print('hello')
# print('world') 
# print('and eveybody')

                    # ОПРЕДЕЛЕНИЯ ФУНЦИИ 
# Определения функции она не может распологаться ниже вызова функции
def sayHello(): # Перед началом блока пишим ключвое слово def указываем имя блока sayHello обязательно () и двоеточее:
    print('hello') # Отступапи показываем какме инструкции будут входить в наш блок 
    print('world') # Это три инструкции (строка 24, 25, 26)
    print('and eveybody')
# При запуске програмы нечегоне будет так как мы не оброшялись к нашей функции


                    # ГЛАВНАЯ ПРОГРАМА
# sayHello() - Вызов фунции
sayHello()      # На этой строчки мы оброшяемся к фунции (sayHello) которе выводит нам три сообшения без этих () не чего не
                # будет
print('pause')  # Мы выводим сообшения пауза
sayHello()      # И обрашяемся к фунции (sayHello)
# Получилась три сообшенияпауза и опять три сообшения тоесть написав один раз блок кода строки (23, 24, 25, 26) мы можем
# обращяться к нему несколько раз


def square(x):                              # Создаем еше одну функцию square но в это раз мы будим применять один аргумент
                                            # (название аргумента или (выбирем имя функции)) (x):
    
    print('Квадрат числа ', x, '=', x**2)   # И в нутри фунции пишим('..... ', (в не строчке)выводим переменую х,
                                            # (затем встрочки пишем равен)'=', (и указываем чему он равен возводим переменую х
                                            # вквадрат) х**2)

    
square(5)                                   # Тепер послео переделения фунции мы ее можем вызвать square(и в скобках передаем
                                            # ему аргумент)
                                            # Тоесть после вызова 5 будет сохраняться в аргументе х и в нутри функции в 43
                                            # строке место х будет постовляться число 5 можно передовать любое значение
for i in range(1, 11):                      # В ГЛАВНОЙ ПРОГРАМЕ в цикле for обойдем все значения от 1 до 10 включительно
                                            # (тоесть указываем 11)
    square(i)                               # И для каждогоиз этих значний мы вызываем функцию square передаем в качестве
                                            # параметра переменую i

#square(3, 4)                               # Призапуске будет ошибка больше параметров чем в определении функции мы передать
                                            # не можем, если не передать никаких параметров () тоже будет ошибка

                                            # СОЗДАЕМ ФУНКЦИЮ КОТРОАЯ ПРИНЕМАЕТ ДВА АРГУМЕНТА

def multiplay(a, b):                        # первый аргумент (а), второй арнумент (b)
    print(a * b)                            # Мы выводим результат этого уможения
multiplay(3, 5)                             # И в главной програме вызывая эту функцию мы передаем ей два вргумента 3, 5 все
                                            # аргументы передаються через запятую в даном случае 3 - это (а), а 5 - это (b)
def even(a):                                # Фунция проверяет на четность
    if a%2==0:                              # Если переданое число чеиное без остатка делется на 2
        print(a, 'четное')                  # Выводим следушие сообшения
    else:
        print(a,'не четное')


for i in range(20, 31):                     # И в главной програме циклом for обходим значения от 20 до 30 включительно
    even(i)                                 # В нутри цикла передовать значения i

# ВНУТРИ ФУНКЦИИ ИСПОЛЬЗУЕМ ЦИКЛ


def factorial(n):  # Создаем фокториал принемаем один аргумент (фокториал кокого числа мы будем считать)
    pr = 1  # Внутрри создаем произведения
    for i in range(2, n+1):  # Обходим все числа от 2 до n включительно
        pr = pr*i  # И надо будит произвидение (pr) умножать на эту переменую i
    print(pr)  # И послецикла выведим накопленое произвидения


# В главной програме вызовим фокториал
factorial(4)



